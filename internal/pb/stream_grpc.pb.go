// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// StreamerClient is the client API for Streamer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamerClient interface {
	Audio(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Streamer_AudioClient, error)
}

type streamerClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamerClient(cc grpc.ClientConnInterface) StreamerClient {
	return &streamerClient{cc}
}

var streamerAudioStreamDesc = &grpc.StreamDesc{
	StreamName:    "Audio",
	ServerStreams: true,
}

func (c *streamerClient) Audio(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Streamer_AudioClient, error) {
	stream, err := c.cc.NewStream(ctx, streamerAudioStreamDesc, "/stream.Streamer/Audio", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamerAudioClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Streamer_AudioClient interface {
	Recv() (*Data, error)
	grpc.ClientStream
}

type streamerAudioClient struct {
	grpc.ClientStream
}

func (x *streamerAudioClient) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamerService is the service API for Streamer service.
// Fields should be assigned to their respective handler implementations only before
// RegisterStreamerService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type StreamerService struct {
	Audio func(*emptypb.Empty, Streamer_AudioServer) error
}

func (s *StreamerService) audio(_ interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return s.Audio(m, &streamerAudioServer{stream})
}

type Streamer_AudioServer interface {
	Send(*Data) error
	grpc.ServerStream
}

type streamerAudioServer struct {
	grpc.ServerStream
}

func (x *streamerAudioServer) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

// RegisterStreamerService registers a service implementation with a gRPC server.
func RegisterStreamerService(s grpc.ServiceRegistrar, srv *StreamerService) {
	srvCopy := *srv
	if srvCopy.Audio == nil {
		srvCopy.Audio = func(*emptypb.Empty, Streamer_AudioServer) error {
			return status.Errorf(codes.Unimplemented, "method Audio not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "stream.Streamer",
		Methods:     []grpc.MethodDesc{},
		Streams: []grpc.StreamDesc{
			{
				StreamName:    "Audio",
				Handler:       srvCopy.audio,
				ServerStreams: true,
			},
		},
		Metadata: "stream.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewStreamerService creates a new StreamerService containing the
// implemented methods of the Streamer service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewStreamerService(s interface{}) *StreamerService {
	ns := &StreamerService{}
	if h, ok := s.(interface {
		Audio(*emptypb.Empty, Streamer_AudioServer) error
	}); ok {
		ns.Audio = h.Audio
	}
	return ns
}

// UnstableStreamerService is the service API for Streamer service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableStreamerService interface {
	Audio(*emptypb.Empty, Streamer_AudioServer) error
}
